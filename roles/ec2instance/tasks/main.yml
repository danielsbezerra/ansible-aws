---
- name: Create security group
  ec2_group:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}" # Must export env
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}" # Must export env
    name: "{{ app_name }}_security_group"
    description: "{{ app_name }} security group"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp  # ssh
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp  # http
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp  # https
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: test_firewall

- name: Create an EC2 key
  ec2_key:
    name: "{{ app_name }}-{{ sever_env }}-key"
    region: "{{ aws_region }}"
  register: ec2_key

- name: Save private key
  copy: content="{{ ec2_key.key.private_key }}" dest=Ëœ/.ssh/{{ app_name }}-{{ sever_env }}-key.pem" mode=0400
  when: ec2_key.changed

- name: Create an EC2 instance
  ec2:
    key_name: "{{ app_name }}-{{ sever_env }}-key"
    region: "{{ aws_region }}"
    group_id: "{{ test_firewall.group_id }}"
    instance_type: "{{ aws_instance_type }}"
    image: "{{ aws_image }}"
    wait: yes
    instance_tags:
        env: "{{ sever_env }}"
    count_tag: env
    exact_count: 1
    vpc_subnet_id: "{{ aws_vpc_subnet }}"
    assign_public_ip: yes
  register: ec2

- name: Add the newly created EC2 instance(s) to host group
  lineinfile: dest={{ hostpath }}
              regexp={{ item.public_ip }} 
              insertafter="[webserver]" 
              line="{{ item.public_ip }} {{ hoststring }}"
              state=present
  with_items: ec2.instances

- wait_for: path={{ hostpath }} search_regex={{ hoststring }}

- name: Wait for SSH to come up
  local_action: wait_for 
                host={{ item.public_ip }} 
                port=22 
                state=started
  with_items: ec2.instances
















# - ec2:
#     #key_name: mykey
#     #group: webserver
#     instance_type: "{{ aws_instance_type }}"
#     image: "{{ aws_image }}"
#     #wait: yes
#     #wait_timeout: 500
#     volumes:
#       - device_name: /dev/xvda
#         volume_type: gp2
#         volume_size: 10
#     vpc_subnet_id: "{{ aws_vpc_subnet }}"
#     assign_public_ip: yes
#     count_tag:
#       Name: dbserver
#     exact_count: 1
#     register: ec2_info
#     state: present

# - debug: var=ec2_info



# - name: make one instance
#   local_action:
#     module: ec2
#     image: "{{ aws_image }}"
#     instance_type: "{{ aws_instance_type }}"
#     aws_access_key: "{{ aws_access_key }}"
#     aws_secret_key: "{{ aws_secret_key }}"
#     keypair: "{{ aws_keypair }}"
#     count: "{{ aws_quantity }}"
#     instance_tags: "{{ aws_instance_tag }}"
#     region: "{{ aws_region }}"
#     group: "{{ aws_group }}"
#     vpc_subnet_id: "{{ aws_vpc_subnet }}"
#     wait: true
#   register: ec2_info

# - debug: var=ec2_info
# - debug: var=item
#   with_items: ec2_info.instance_ids

# - add_host: hostname={{ item.public_ip }} groupname={{ app_name }}_{{ server_env }}
#   with_items: ec2_info.instances

# - name: wait for instances to listen on port:22
#   wait_for:
#     state: started
#     host: "{{ item.public_dns_name }}"
#     port: 22
#   with_items: ec2_info.instances